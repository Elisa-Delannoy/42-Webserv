/*

2. Analyser la ligne de requÃªte (Request line)
La premiÃ¨re ligne contient gÃ©nÃ©ralement trois Ã©lÃ©ments :
MÃ©thode HTTP (ex : GET, POST, PUT, DELETE)
Chemin ou URI (ex : /index.html, /api/users?id=5)
Version du protocole HTTP (ex : HTTP/1.1)
Il faut dÃ©couper cette ligne par espaces pour extraire ces trois Ã©lÃ©ments.

http://example.com:8080/path/to/resource?param1=value1&param2=value2#fragment
Voici la dÃ©composition de chaque partie :

Protocole (http:// ou https://) : SpÃ©cifie le protocole de communication entre le client et le serveur. Le https est sÃ©curisÃ© (cryptÃ©) par rapport Ã  http.
Nom de domaine ou adresse IP (example.com) : Le nom de domaine du serveur (ou son adresse IP).
Port (:8080) : Le numÃ©ro de port sur lequel le serveur Ã©coute. Le port par dÃ©faut pour HTTP est 80 et pour HTTPS, c'est 443, donc il est souvent omis.
Chemin (/path/to/resource) : Indique la ressource spÃ©cifique demandÃ©e (par exemple, un utilisateur particulier ou une liste d'articles).
ParamÃ¨tres de la requÃªte (?param1=value1&param2=value2) : Une sÃ©rie de paramÃ¨tres clÃ©-valeur passÃ©s Ã  l'URL. Ils permettent de filtrer ou de personnaliser la demande.
Fragment (#fragment) : UtilisÃ© pour indiquer une section spÃ©cifique d'une page web, souvent ignorÃ© par les serveurs dans les requÃªtes HTTP.

ParamÃ¨tres de requÃªte dans l'URL :
Ce sont des paires clÃ©-valeur ajoutÃ©es Ã  l'URL aprÃ¨s le ?.
Les paramÃ¨tres sont sÃ©parÃ©s par des & et les clÃ©s et valeurs sont sÃ©parÃ©es par des =.

3. Extraire les headers (entÃªtes)
AprÃ¨s la ligne de requÃªte, on a une sÃ©rie de lignes sous la forme ClÃ©: Valeur
Chaque header fournit des infos importantes (ex : Host, User-Agent, Content-Type, Content-Length, etc.)
Il faut lire ces lignes jusquâ€™Ã  rencontrer une ligne vide (indiquant la fin des headers).
Ces headers sont souvent stockÃ©s dans une structure clÃ©-valeur (comme un dictionnaire).

4. Analyser le corps (body)
Si la requÃªte contient un corps (ex : dans les requÃªtes POST, PUT), il vient aprÃ¨s la ligne vide qui suit les headers.
La taille du corps est souvent donnÃ©e par le header Content-Length.
Le corps peut contenir diffÃ©rentes donnÃ©es (JSON, formulaire URL-encodÃ©, fichier, etc.) selon le Content-Type.
Il faut stocker ce corps en fonction de son type pour le traiter correctement.

Que faire concrÃ¨tement avec le corps dâ€™une requÃªte ?
1. Lire le corps depuis la requÃªte
Dâ€™abord, tu dois extraire le corps brut (la chaÃ®ne ou donnÃ©es binaires) aprÃ¨s avoir lu la taille (Content-Length) ou en gÃ©rant un transfert chunked.
Sans lire correctement le corps, tu ne peux rien en faire.

2. Identifier son format avec Content-Type
Regarde le header Content-Type pour savoir comment interprÃ©ter ce corps (JSON, formulaire, XML, multipart, etc.).
Sâ€™il nâ€™y a pas de corps (ex: requÃªte GET), il nâ€™y aura pas de Content-Type.

3. Parser le corps
Selon le format, applique un parseur adaptÃ© :
JSON â†’ parser JSON (avec une lib ou Ã  la main)
Formulaire URL-encoded â†’ dÃ©coupe clÃ©=valeur
Multipart â†’ dÃ©coupe en parties (pour fichiers)
Texte brut â†’ utilise tel quel ou convertis
XML â†’ parse XML

4. Utiliser les donnÃ©es extraites
AprÃ¨s parsing, tu as des donnÃ©es structurÃ©es (variables, objets, fichiers, etc.).
Tu peux :
Valider ces donnÃ©es (ex: champs obligatoires, formats)
Stocker en base de donnÃ©es
Effectuer une action mÃ©tier (login, ajout de produit, etc.)

GÃ©nÃ©rer une rÃ©ponse adaptÃ©e


ğŸ§  En rÃ©sumÃ©
Voici une checklist intelligente pour gÃ©rer n'importe quel corps HTTP :
âœ… Est-ce que Content-Length ou Transfer-Encoding est dÃ©fini ? â†’ sinon pas de corps.
âœ… Lire les bons octets du corps (pas plus, pas moins).
âœ… Lire Content-Type pour identifier le format.
âœ… GÃ©rer les cas spÃ©cifiques :

gzip ? â†’ dÃ©compresser
chunked ? â†’ assembler les morceaux

âœ… Appliquer un parseur adaptÃ© :
json, xml, form, multipart, text, etc.

ğŸ›‘ Si Content-Type inconnu â†’ soit :
le rejeter,
soit le traiter comme application/octet-stream (fichier brut)

5. Analyser les paramÃ¨tres
Il peut y avoir des paramÃ¨tres dans lâ€™URL (ex : /api/users?id=5&name=Jean)
Il faut les extraire en dÃ©coupant la partie aprÃ¨s ? et sÃ©parer chaque paramÃ¨tre clÃ©=valeur.
Il peut aussi y avoir des paramÃ¨tres dans le corps (ex : formulaire POST).
*/

#ifndef PARSEREQUEST_HPP
# define PARSEREQUEST_HPP

# include "HTTPServer.hpp"
# include <map>

class ParseRequest
{
	private:
		// char*		 						_request;
		std::string							_method;
		std::string							_path;
		std::string							_version;
		std::map<std::string, std::string>	_header;
	
	public:
		ParseRequest();
		// ParseRequest(char* req);
		~ParseRequest();
		void	DivideRequest(char *buf);
		int 	DivideFirstLine(std::string& first_line);
		void 	DivideHeader(std::string& first_line);
		const std::string&	GetMethod() const;
		const std::string&	GetPath() const;
		const std::string&	GetVersion() const;
		const std::map<std::string, std::string>&	GetHeader() const;
};

#endif
